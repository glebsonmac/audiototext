// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: pkg/transcription/transcription.proto

package transcription

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TranscriptionService_Transcribe_FullMethodName       = "/transcription.TranscriptionService/Transcribe"
	TranscriptionService_TranscribeStream_FullMethodName = "/transcription.TranscriptionService/TranscribeStream"
	TranscriptionService_GetModels_FullMethodName        = "/transcription.TranscriptionService/GetModels"
	TranscriptionService_GetStatus_FullMethodName        = "/transcription.TranscriptionService/GetStatus"
)

// TranscriptionServiceClient is the client API for TranscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranscriptionServiceClient interface {
	// Transcribe audio to text
	Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error)
	// Stream audio for real-time transcription
	TranscribeStream(ctx context.Context, opts ...grpc.CallOption) (TranscriptionService_TranscribeStreamClient, error)
	// Get available models
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error)
	// Get server status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type transcriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscriptionServiceClient(cc grpc.ClientConnInterface) TranscriptionServiceClient {
	return &transcriptionServiceClient{cc}
}

func (c *transcriptionServiceClient) Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error) {
	out := new(TranscribeResponse)
	err := c.cc.Invoke(ctx, TranscriptionService_Transcribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptionServiceClient) TranscribeStream(ctx context.Context, opts ...grpc.CallOption) (TranscriptionService_TranscribeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TranscriptionService_ServiceDesc.Streams[0], TranscriptionService_TranscribeStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transcriptionServiceTranscribeStreamClient{stream}
	return x, nil
}

type TranscriptionService_TranscribeStreamClient interface {
	Send(*TranscribeRequest) error
	Recv() (*TranscribeResponse, error)
	grpc.ClientStream
}

type transcriptionServiceTranscribeStreamClient struct {
	grpc.ClientStream
}

func (x *transcriptionServiceTranscribeStreamClient) Send(m *TranscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transcriptionServiceTranscribeStreamClient) Recv() (*TranscribeResponse, error) {
	m := new(TranscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transcriptionServiceClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error) {
	out := new(GetModelsResponse)
	err := c.cc.Invoke(ctx, TranscriptionService_GetModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptionServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, TranscriptionService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscriptionServiceServer is the server API for TranscriptionService service.
// All implementations must embed UnimplementedTranscriptionServiceServer
// for forward compatibility
type TranscriptionServiceServer interface {
	// Transcribe audio to text
	Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error)
	// Stream audio for real-time transcription
	TranscribeStream(TranscriptionService_TranscribeStreamServer) error
	// Get available models
	GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error)
	// Get server status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	mustEmbedUnimplementedTranscriptionServiceServer()
}

// UnimplementedTranscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranscriptionServiceServer struct {
}

func (UnimplementedTranscriptionServiceServer) Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedTranscriptionServiceServer) TranscribeStream(TranscriptionService_TranscribeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TranscribeStream not implemented")
}
func (UnimplementedTranscriptionServiceServer) GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedTranscriptionServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTranscriptionServiceServer) mustEmbedUnimplementedTranscriptionServiceServer() {}

// UnsafeTranscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscriptionServiceServer will
// result in compilation errors.
type UnsafeTranscriptionServiceServer interface {
	mustEmbedUnimplementedTranscriptionServiceServer()
}

func RegisterTranscriptionServiceServer(s grpc.ServiceRegistrar, srv TranscriptionServiceServer) {
	s.RegisterService(&TranscriptionService_ServiceDesc, srv)
}

func _TranscriptionService_Transcribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptionServiceServer).Transcribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptionService_Transcribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptionServiceServer).Transcribe(ctx, req.(*TranscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptionService_TranscribeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranscriptionServiceServer).TranscribeStream(&transcriptionServiceTranscribeStreamServer{stream})
}

type TranscriptionService_TranscribeStreamServer interface {
	Send(*TranscribeResponse) error
	Recv() (*TranscribeRequest, error)
	grpc.ServerStream
}

type transcriptionServiceTranscribeStreamServer struct {
	grpc.ServerStream
}

func (x *transcriptionServiceTranscribeStreamServer) Send(m *TranscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transcriptionServiceTranscribeStreamServer) Recv() (*TranscribeRequest, error) {
	m := new(TranscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TranscriptionService_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptionServiceServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptionService_GetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptionServiceServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptionService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptionServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptionService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptionServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranscriptionService_ServiceDesc is the grpc.ServiceDesc for TranscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transcription.TranscriptionService",
	HandlerType: (*TranscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transcribe",
			Handler:    _TranscriptionService_Transcribe_Handler,
		},
		{
			MethodName: "GetModels",
			Handler:    _TranscriptionService_GetModels_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TranscriptionService_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TranscribeStream",
			Handler:       _TranscriptionService_TranscribeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/transcription/transcription.proto",
}
