---
description: Convenções de código e práticas de desenvolvimento
globs: 
alwaysApply: true
---
---
description: Convenções de código e práticas de desenvolvimento
globs: 
alwaysApply: true
---
## Convenções para Go

### 1. Estrutura de Pastas e Arquivos
- **snake_case**: Para arquivos Go, use nomes em snake_case (letras minúsculas separadas por underscores).
- **CamelCase**: Para nomes de pacotes exportados, siga a convenção CamelCase.
- **lowercase**: Para pacotes (diretórios), use nomes em minúsculos sem underscores.

### 2. Estrutura do Projeto
```
/
├── cmd/                    # Aplicações principais do projeto
│   ├── server/            # Servidor gRPC
│   │   └── main.go        # Ponto de entrada do servidor
│   ├── wasm/              # Frontend WebAssembly
│   │   └── main.go        # Ponto de entrada do WASM
│   └── hardware/          # Detecção de hardware
│       └── main.go        # Ponto de entrada do detector
├── internal/              # Código privado da aplicação
│   ├── audio/            # Processamento de áudio
│   │   ├── capture/      # Captura de áudio
│   │   ├── processing/   # Processamento de áudio
│   │   └── streaming/    # Streaming de áudio
│   ├── inference/        # Sistema de inferência ONNX
│   │   ├── models/       # Gerenciamento de modelos
│   │   ├── runtime/      # ONNX Runtime
│   │   └── optimization/ # Otimização de modelos
│   ├── hardware/         # Detecção e gerenciamento de hardware
│   │   ├── detection/    # Detecção de recursos
│   │   ├── monitoring/   # Monitoramento de recursos
│   │   └── optimization/ # Otimização de recursos
│   ├── grpc/             # Serviços gRPC
│   │   ├── server/       # Servidor gRPC
│   │   ├── client/       # Cliente gRPC
│   │   └── streaming/    # Streaming gRPC
│   └── wasm/             # Componentes WebAssembly
│       ├── frontend/     # Interface do usuário
│       ├── audio/        # Processamento de áudio no WASM
│       └── visualization/# Visualização de dados
├── pkg/                   # Bibliotecas que podem ser usadas por aplicações externas
│   ├── models/           # Modelos de IA
│   │   ├── download/     # Download de modelos
│   │   ├── conversion/   # Conversão de modelos
│   │   └── optimization/ # Otimização de modelos
│   ├── proto/            # Definições de protocolo
│   │   ├── audio/        # Protocolos de áudio
│   │   └── inference/    # Protocolos de inferência
│   └── utils/            # Utilitários compartilhados
│       ├── hardware/     # Utilitários de hardware
│       ├── audio/        # Utilitários de áudio
│       └── wasm/         # Utilitários WebAssembly
├── web/                   # Recursos web
│   ├── assets/           # Recursos estáticos
│   │   ├── css/         # Estilos
│   │   ├── js/          # JavaScript
│   │   └── wasm/        # Binários WebAssembly
│   └── templates/        # Templates HTML
├── configs/              # Arquivos de configuração
│   ├── hardware/        # Configurações de hardware
│   ├── models/          # Configurações de modelos
│   └── wasm/            # Configurações WebAssembly
└── docs/                 # Documentação do projeto
```

### 3. Nomes de Tipos e Interfaces
- **PascalCase** para tipos exportados (AudioService, InferenceEngine).
- **camelCase** para variáveis e funções não exportadas (processAudio, getHardwareInfo).
- Evite redundância: Não use AudioServiceStruct, apenas AudioService.
- Interfaces com um único método geralmente são nomeadas com o sufixo "er" (AudioProcessor, HardwareDetector).

### 4. Nomes de Variáveis e Funções
- **camelCase** para variáveis e funções não exportadas (processAudio, getHardwareInfo).
- **PascalCase** para variáveis e funções exportadas (ProcessAudio, GetHardwareInfo).
- Use nomes claros e descritivos, evitando abreviações excessivas (GetAudioData e não gad).
- Acrônimos em nomes devem ser tratados como uma palavra (HttpServer → HTTPServer, Api → API).
- Nunca use Impl como sufixo para dizer que está implementando uma interface.

### 5. Convenções para Testes
- Arquivos de teste têm o sufixo _test.go (audio_service_test.go).
- Funções de teste começam com Test seguido do nome da função testada (TestAudioService_Process).
- Benchmarks começam com Benchmark (BenchmarkAudioService_Process).
- Exemplos começam com Example (ExampleAudioService_Process).
- Os testes ficam no mesmo pacote que o código testado.

### 6. Importações
- Organize as importações em grupos:
  1. Pacotes da biblioteca padrão
  2. Pacotes de terceiros
  3. Pacotes internos do projeto
- Use o caminho completo de importação baseado no módulo Go.

Exemplo:
```go
import (
    "context"
    "fmt"
    
    "github.com/grpc/grpc-go"
    "github.com/microsoft/onnxruntime-go"
    
    "github.com/seu-usuario/audiototext/internal/audio"
)
```

### 7. Tratamento de Erros
- Retorne erros explicitamente em vez de usar panics.
- Use pacotes como "errors" ou "github.com/pkg/errors" para criar e enriquecer erros.
- Verifique erros imediatamente após a chamada que pode gerá-los.
- Evite usar _ para ignorar erros, a menos que seja absolutamente necessário.

### 8. Documentação
- Todos os pacotes e funções/tipos exportados devem ter comentários de documentação.
- Comentários de documentação começam com o nome do elemento que estão documentando em inglês.
- Use frases completas com ponto final.

Exemplo:
```go
// AudioService provides methods for audio processing and transcription
type AudioService struct {
    // ...
}

// Process processes the audio input and returns transcription
// Returns a transcription result and any error encountered
func (s *AudioService) Process(ctx context.Context, input AudioInput) (TranscriptionResult, error) {
    // ...
}
```

### 9. Convenções para WebAssembly
- Use o pacote `syscall/js` para interação com JavaScript
- Mantenha a lógica de negócios separada da interface WebAssembly
- Use tipos Go nativos quando possível, convertendo para/do JavaScript apenas quando necessário
- Documente claramente as funções exportadas para JavaScript
- Implemente fallbacks para navegadores não suportados
- Otimize o tamanho do binário WebAssembly
- Use WebGL para visualização de dados

### 10. Convenções para gRPC
- Defina serviços e mensagens em arquivos .proto
- Use nomes descritivos para serviços e métodos
- Mantenha as mensagens pequenas e focadas
- Documente todos os serviços e métodos
- Use context.Context para controle de cancelamento
- Implemente streaming para dados de áudio
- Use compressão quando apropriado

### 11. Convenções para Hardware
- Implemente detecção automática de recursos
- Use interfaces para abstrair diferentes tipos de hardware
- Implemente fallbacks para recursos limitados
- Monitore uso de recursos em tempo real
- Otimize configurações baseadas no hardware
- Documente requisitos de hardware

### 12. Convenções para ONNX Runtime
- Implemente cache de modelos otimizados
- Use interfaces para diferentes backends (CPU/GPU)
- Implemente fallback para CPU quando necessário
- Otimize batch size baseado em memória
- Monitore uso de memória e performance
- Documente requisitos de modelos