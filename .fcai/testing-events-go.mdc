---
description: Convenções e práticas para testes automatizados em Go
globs: **/*_test.go
alwaysApply: true
---
# Ao trabalhar com testes automatizados em Go

## Estrutura e Organização
- Os arquivos de teste devem estar no mesmo pacote que o código testado, com o sufixo `_test.go`
- Para testes de integração, use o sufixo `_test` no nome do pacote
- Espelhe a estrutura de diretórios do código fonte nos testes
- Não implemente testes para interfaces, apenas para implementações concretas

## Nomenclatura
- Arquivos de teste devem seguir o padrão `nome_do_arquivo_test.go` (ex: `audio_service_test.go`)
- Funções de teste devem começar com `Test` seguido do nome da função ou método testado em PascalCase
- Use nomes descritivos que indiquem o que está sendo testado (ex: `TestAudioService_Transcribe_ValidAudio`)
- Para subtestes, use `t.Run()` com nomes descritivos em formato de frase (ex: `t.Run("should return error when audio format is invalid", func(t *testing.T) {...})`)

## Execução
- Execute os testes a partir do diretório raiz do projeto
- Use o comando `go test ./...` para executar todos os testes do projeto
- Para testes específicos, use `go test ./caminho/para/pacote`
- Para testes com cobertura, use `go test ./... -coverprofile=coverage.out`

## Práticas Recomendadas
- Use tabelas de testes (`table-driven tests`) para testar múltiplos cenários
- Utilize subtestes com `t.Run()` para organizar melhor os testes
- Use `testify` ou pacotes similares para asserções mais expressivas
- Implemente testes de benchmark quando relevante com o prefixo `Benchmark`
- Crie exemplos executáveis com o prefixo `Example` para documentação

## Testes de Performance
- Implemente testes de benchmark para componentes críticos:
  - Processamento de áudio
  - Inferência ONNX
  - Comunicação gRPC
  - WebAssembly performance
  - Hardware detection
  - Model optimization
- Use `go test -bench=.` para executar benchmarks
- Compare resultados com diferentes configurações de hardware
- Teste performance em diferentes dispositivos

## Testes de Integração
- Mantenha testes de integração separados dos testes unitários
- Use tags de compilação para separar testes de integração: `// +build integration`
- Execute testes de integração explicitamente: `go test ./... -tags=integration`
- Teste a integração entre:
  - WebAssembly frontend e backend gRPC
  - Captura de áudio e processamento
  - Sistema de inferência e gRPC
  - Gerenciamento de recursos e adaptação
  - Hardware detection e optimization
  - Model download e conversion

## Testes de Hardware
- Implemente testes que detectam recursos disponíveis
- Teste diferentes configurações de CPU/GPU
- Verifique adaptação a diferentes níveis de memória
- Teste performance em diferentes dispositivos
- Teste fallbacks para recursos limitados
- Verifique otimização automática

## Testes de WebAssembly
- Teste compatibilidade com diferentes navegadores
- Verifique interação com JavaScript
- Teste performance de renderização
- Verifique uso de memória
- Teste fallbacks para navegadores não suportados
- Verifique otimização de binário

## Testes de ONNX Runtime
- Teste diferentes backends (CPU/GPU)
- Verifique otimização de modelos
- Teste cache de modelos
- Verifique uso de memória
- Teste fallback para CPU
- Verifique batch processing

## Mocks e Stubs
- Use interfaces para facilitar a criação de mocks
- Prefira ferramentas como `gomock` ou `testify/mock` para geração de mocks
- Mantenha os mocks em um subdiretório `mocks/` dentro do pacote testado
- Mock componentes externos como:
  - Serviço gRPC
  - ONNX Runtime
  - WebRTC
  - Sistema de arquivos
  - Hardware detection
  - WebAssembly runtime
  - Model downloader
  .
